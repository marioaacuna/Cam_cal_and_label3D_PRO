% Temporary 3D Labeling File Creation Script for Multiple Animals and Sessions
% ==============================================================================
% This script creates temporary 3D labeling files for each specified animal and
% session in the context of the DANNCE motion capture analysis framework. It is
% designed to handle multiple animals and sessions concurrently, improving efficiency
% through parallel processing.
%
% The script sets up essential variables for the processing and analysis of 3D
% motion data, extracting necessary data from prediction files generated by the
% DANNCE system and organizing it according to the structure required by 3D labeling tools.
%
% Version: 1.0
% Date: 02.05.24
% Author: [Insert author's name here]
% Contact: [Insert contact information here]
% ==============================================================================
%
% Inputs:
%   animals - Cell array of animal identifiers
%   sessions - Cell array of session numbers
%   rootpath_data - Root path where DANNCE files for each animal/session are stored
%
% Outputs:
%   Multiple temp_{animal_ID}_{session}_Label3D.mat files - Temporary labeling files containing:
%     1. status - Indicator of the status of markers
%     2. skeleton - Structural information about the animal model
%     3. imageSize - Image dimensions from the video setup
%     4. cameraPoses - Camera position and orientation data
%     5. data_3D - 3D coordinates of body parts per selected frame
%     6. camParams - Camera parameters including intrinsic and extrinsic properties
%     7. videos - Corresponding video frames selected for labeling
%
% Change Log:
%   02.05.24 - Adaptation for parallel processing of multiple animals and sessions.

%% INIT
clear
clc
close all

% Define animals and sessions
animals = {'AK_553','AK_665', 'AK_667'}; % AK_522 already don
sessions = {'0', '1'};

% Assume rootpath_data is predefined or set here
rootpath_data = 'D:\DANNCE'; % Base directory for project data

% Predefine paths to necessary files (replace these placeholders with actual paths if different)
template_file = "D:\DANNCE\post_prediction_training\template_Label3D.mat";
load(template_file, 'imageSize', 'cameraPoses', 'camParams'); % Load template file data once for all iterations
skeleton = load('mouse22.mat');

parfor ianimal = 1:length(animals)
    for isession = 1:length(sessions)
        animal_ID = animals{ianimal};
        session = sessions{isession};

        % Define paths specific to each animal and session
        prediction_folder = fullfile(rootpath_data, animal_ID, session, 'DANNCE', 'predict_results');
        data_predicted = fullfile(prediction_folder, 'save_data_AVG0.mat');

        % Load the predicted data
        T = load(data_predicted, 'pred', 'p_max', 'metadata');

        % Process data, select frames, load videos, etc., using functions defined outside this script.
        % Placeholder functions must be replaced with actual data processing functions.
        done = processDANNCEData(T.pred, T.p_max, T.metadata, animal_ID, session, imageSize, cameraPoses, camParams, skeleton);
    end
end

function done = processDANNCEData(pred, p_max, metadata, animal_ID, session, imageSize, cameraPoses, camParams, skeleton)
    % processDANNCEData Processes and saves data for DANNCE motion capture analysis
    %
    % Inputs:
    %   pred - Predicted 3D positions from DANNCE
    %   p_max - Confidence scores for predictions
    %   metadata - Metadata associated with predictions
    %   animal_ID - Identifier for the current animal
    %   session - Identifier for the current session
    %   imageSize - Dimensions of the images from video capture
    %   cameraPoses - Camera position and orientation data
    %   camParams - Camera intrinsic and extrinsic parameters
    %   skeleton - Structural model of the animal
    %
    % This function loads video data, selects frames based on the method
    % chosen by the user, processes these frames, and saves the results.
    done = 0;
    % Determine the number of frames and body parts from 'pred'
    [n_frames, ~, n_bodyparts] = size(pred);

    % Example of frame selection using quantile-based approach
    mean_frames = mean(p_max, 2);
    q_upper = quantile(mean_frames, 0.998);
    q_lower = quantile(mean_frames, 0.001);
    framesToLabel = [find(mean_frames > q_upper); find(mean_frames < q_lower)];
    framesToLabel = sort(framesToLabel); % Sort selected frames for consistent ordering

    % Load the videos into memory
    videoFolder = fullfile('D:/DANNCE', animal_ID, session, 'videos');%'D:\DANNCE\AK_553\0\videos'
    vidName = '*.mp4';
    vidPaths = collectVideoPaths(videoFolder, vidName);
    videos = cell(length(vidPaths),1);

    for nVid = 1:numel(vidPaths)
        videos{nVid} = readFrames(vidPaths{nVid}, framesToLabel); % Load specified frames
    end

    % Save videos
    labeled_frames_folder = fullfile('D:\DANNCE\post_prediction_training', animal_ID, session, 'Labeled_frames');
    if ~exist(labeled_frames_folder, "dir")
        mkdir(labeled_frames_folder);
    end
    videos_filename = fullfile(labeled_frames_folder, 'videos.mat');
    save(videos_filename, 'videos', '-v7.3');

    % Save 'frames_to_label' variable
    save(fullfile(labeled_frames_folder, 'frames_to_label.mat'), 'framesToLabel');

    % Status matrix filled with ones (assuming all markers are tracked)
    n_cams  = size(cameraPoses,1);
    status = ones(n_bodyparts, n_cams, numel(framesToLabel));

    % Reformat pred data to data_3D for all selected frames
    data_3D = reshape(permute(pred(framesToLabel, :, :), [1, 2, 3]), [], n_bodyparts * 3);

    % Create the temporary labeling file
    save_folder = fullfile('D:\DANNCE\post_prediction_training', 'temp_files_created');
    if ~exist(save_folder, "dir"), mkdir(save_folder), end
    temp_label_file = fullfile(save_folder, sprintf('temp_%s_%s_Label3D.mat', animal_ID, session));
    save(temp_label_file, 'status', 'skeleton', 'imageSize', 'cameraPoses', 'data_3D', 'camParams', 'videos', '-v7.3');
    disp(['Data processed and saved for ' animal_ID ' in session ' session]);
    done = 1;
end
