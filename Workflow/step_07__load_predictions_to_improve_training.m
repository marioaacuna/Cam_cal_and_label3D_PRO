% Temporary 3D Labeling File Creation Script
% ==============================================================
% This script creates a temporary 3D labeling file ('temp_{animal_ID}Label3D.mat')
% for use in the DANNCE motion capture analysis framework. It sets up essential
% variables required for further processing and analysis of 3D motion data.

% The script operates by extracting necessary data from a prediction file
% generated by the DANNCE system and organizing it according to the structure
% required by the 3D labeling tools. It also includes functionality to select
% frames based on either a quantile-based approach or a random selection, 
% catering to different experimental needs.

% Version: 1.0
% Date: [Insert current date here]
% Author: [Insert author's name here]
% Contact: [Insert contact information here]
% ==============================================================
%
% Inputs:
%   animal_ID - Identifier for the animal being analyzed
%   rootpath_data - Root path where the DANNCE files are located
%   selection_method - 'quantile' or 'random', determines how frames are selected for labeling
%
% Outputs:
%   temp_{animal_ID}Label3D.mat - Temporary labeling file containing:
%     1. status - Indicates the status of markers (all set to 1, meaning "tracked")
%     2. skeleton - Structural information about the animal model used in DANNCE
%     3. imageSize - Image dimensions from the video capture setup
%     4. cameraPoses - Camera position and orientation data
%     5. data_3D - 3D coordinates of body parts per selected frame
%     6. camParams - Camera parameters including intrinsic and extrinsic properties
%
% Required files:
%   prediction_folder/save_data_AVG0.mat - File containing 'pred', 'p_max', 'metadata'
%   Data/20240406_232541_Label3D.mat - Template file with 'imageSize', 'cameraPoses', 'camParams'
%   ./Label3D/skeletons/Label3D/skeletons/mouse22.mat - Skeleton file for the animal model

% Change log:
%   [Insert date and description of changes made in new versions here]

% Start of the script:


%% INIT
clear
clc
close all

% Define animal ID and set up file paths
animal_ID = 'test_animal_2_glass';
rootpath_data = fullfile('/Volumes/External/DANNCE_files', animal_ID);
prediction_folder = fullfile(rootpath_data, 'DANNCE', 'predict_results');
data_predicted = fullfile(prediction_folder, 'save_data_AVG0.mat');
template_file = fullfile('/Users/mario/Library/CloudStorage/OneDrive-UniversitaetBern/Coding_playground/DANNCE_train_after_predictions/', 'Data', '20240406_232541_Label3D.mat');

% Load necessary data
load(data_predicted, 'pred', 'p_max', 'metadata'); % Load predicted data
load(template_file, 'imageSize', 'cameraPoses', 'camParams'); % Load template file data

% Determine the number of frames and body parts from 'pred'
[n_frames, ~, n_bodyparts] = size(pred);

% User decides the method for frame selection (quantile or random)
selection_method = 'random'; % Change to 'quantile' as needed
n_frames_to_label = round(0.1 * n_frames); % 10% of total frames

if strcmp(selection_method, 'quantile')
    mean_frames = mean(p_max, 2);
    q_upper = quantile(mean_frames, 0.95);
    q_lower = quantile(mean_frames, 0.05);
    framesToLabel = [find(mean_frames > q_upper); find(mean_frames < q_lower)];
    framesToLabel = sort(framesToLabel);
else
    framesToLabel = randperm(n_frames, n_frames_to_label);
end

% load videos
%% Load the videos into memory
vidName = '*.mp4';
%vidPaths = collectVideoPaths(fullfile(projectFolder,'trimmed_vids'), vidName);
vidPaths = collectVideoPaths(fullfile(rootpath_data, 'videos'), vidName);
videos = cell(length(vidPaths),1);
parfor nVid = 1:numel(vidPaths)
    videos{nVid} = readFrames(vidPaths{nVid}, framesToLabel); % Load
end

% Save 'frames_to_label' variable in the animal root path
save(fullfile(rootpath_data, 'frames_to_label.mat'), 'framesToLabel');

% Load skeleton from a fixed location
% load('Label3D/skeletons/mouse22.mat', 'skeleton');
skeleton = load('mouse22.mat');

% Create status matrix filled with ones
n_cams  =size(imageSize,1);
status = ones(n_bodyparts, n_cams, n_frames); % Assuming n_cams = 1 for simplicity

% Reformat pred data to data_3D
data_3D = reshape(permute(pred(framesToLabel, :, :), [1, 3, 2]), [], n_bodyparts * 3);

% Create the temporary labeling file
temp_label_file = fullfile(rootpath_data, sprintf('temp_%sLabel3D.mat', animal_ID));
save(temp_label_file, 'status', 'skeleton', 'imageSize', 'cameraPoses', 'data_3D', 'camParams');
